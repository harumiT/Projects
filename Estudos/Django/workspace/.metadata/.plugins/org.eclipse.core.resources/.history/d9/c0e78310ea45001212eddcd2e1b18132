#from django.template import Context, loader 
from django.shortcuts import render_to_response, get_object_or_404
from polls.models import Poll
from django.http import HttpResponse, HttpResponseRedirect#, Http404
from django.template import RequestContext

def index(request):
    poll_list = Poll.objects.all().order_by('-pub_date')[:5]
    #t = loader.get_template('polls/index.html')
    #c = Context({
    #             'latest_poll_list': poll_list, # 'latest_poll_list' is the object that will used in the HTML
    #})
    #return HttpResponse(t.render(c))
    return render_to_response('polls/index.html', {'latest_poll_list': poll_list}) # it's a different way to implement, using shortcut (atalho). Using this way, you don't need to import the context, loader and HttpResponse

def detail(request, poll_id, name):
    #try:
    #    p = Poll.objects.get(pk = poll_id)
    #except Poll.DoesNotExist:
    #    raise Http404
    #return render_to_response()('polls/detail.html', {'poll': p})
    p = get_object_or_404(Poll, pk = poll_id)
    return render_to_response('polls/detail.html', {'poll': p, 'name': name}, context_instance=RequestContext(request))

def results(request, poll_id):
    return HttpResponse("You're at the results of poll %s." % poll_id)

def vote(request, poll_id):
    return HttpResponse("You're voting on poll %s." % poll_id)